version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: alert_bot_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-alert_bot_dev}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./init/mongodb:/docker-entrypoint-initdb.d:ro
      - ./logs/mongodb:/var/log/mongodb
    networks:
      - alert_bot_network
    command: >
      mongod
      --auth
      --bind_ip_all
      --logpath /var/log/mongodb/mongod.log
      --logappend
      --journal
      --replSet rs0
    healthcheck:
      test: |
        mongosh --eval 'db.runCommand("ping").ok' --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Replica Set Initialization
  mongodb-init:
    image: mongo:7.0
    container_name: alert_bot_mongodb_init
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - alert_bot_network
    command: >
      mongosh --host mongodb:27017 --eval '
        try {
          rs.initiate({
            _id: "rs0",
            members: [
              { _id: 0, host: "mongodb:27017" }
            ]
          });
          print("Replica set initiated successfully");
        } catch (e) {
          print("Replica set already initiated or error:", e);
        }
      '
    restart: "no"

  # Redis Cache and Session Store
  redis:
    image: redis:7.2-alpine
    container_name: alert_bot_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./init/redis:/docker-entrypoint-initdb.d:ro
      - ./logs/redis:/var/log/redis
    networks:
      - alert_bot_network
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --logfile /var/log/redis/redis.log
      --loglevel notice
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Initialization
  redis-init:
    image: redis:7.2-alpine
    container_name: alert_bot_redis_init
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - alert_bot_network
    volumes:
      - ./init/redis:/scripts:ro
    command: >
      sh -c '
        echo "Waiting for Redis to be ready...";
        sleep 5;
        echo "Initializing Redis data structures...";
        redis-cli -h redis -p 6379 < /scripts/init.redis;
        echo "Redis initialization completed";
      '
    restart: "no"

  # MongoDB Express (Web-based MongoDB admin interface)
  mongo-express:
    image: mongo-express:1.0.2
    container_name: alert_bot_mongo_express
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-admin123}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-admin123}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD:-admin123}
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
    ports:
      - "${MONGO_EXPRESS_PORT:-8081}:8081"
    networks:
      - alert_bot_network
    profiles:
      - dev
      - debug

  # Redis Commander (Web-based Redis admin interface)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: alert_bot_redis_commander
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USERNAME:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin123}
    ports:
      - "${REDIS_COMMANDER_PORT:-8082}:8081"
    networks:
      - alert_bot_network
    profiles:
      - dev
      - debug

  # Database Backup Service
  db-backup:
    image: alpine:3.18
    container_name: alert_bot_db_backup
    restart: unless-stopped
    depends_on:
      - mongodb
      - redis
    environment:
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_PASSWORD: ${MONGO_ROOT_PASSWORD:-admin123}
      MONGO_DATABASE: ${MONGO_DATABASE:-alert_bot_dev}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - alert_bot_network
    command: >
      sh -c '
        apk add --no-cache mongodb-tools redis dcron;
        echo "$BACKUP_SCHEDULE /backup.sh" | crontab -;
        crond -f -l 2;
      '
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/mongodb
  
  mongodb_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/mongodb-config
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis

networks:
  alert_bot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1