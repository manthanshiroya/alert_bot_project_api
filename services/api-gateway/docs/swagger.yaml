openapi: 3.0.3
info:
  title: Alert Bot API Gateway
  description: |
    Comprehensive API Gateway for the Alert Bot system that handles authentication, routing, and webhook processing.
    
    ## Features
    - User authentication and authorization
    - JWT token management
    - API key authentication
    - TradingView webhook processing
    - Admin panel functionality
    - Rate limiting and security
    
    ## Authentication
    This API supports multiple authentication methods:
    - **JWT Bearer Token**: For user authentication
    - **API Key**: For webhook and programmatic access
    - **Admin Token**: For administrative operations
    
    ## Rate Limiting
    Different endpoints have different rate limits:
    - Authentication: 10 requests per minute
    - Webhooks: 100 requests per minute
    - General API: 60 requests per minute
    - Admin API: 30 requests per minute
  version: 1.0.0
  contact:
    name: Alert Bot API Support
    email: support@alertbot.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.alertbot.com
    description: Production server

paths:
  # Authentication Endpoints
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            example:
              email: user@example.com
              password: SecurePassword123!
              firstName: John
              lastName: Doe
              telegramId: "123456789"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            example:
              email: user@example.com
              password: SecurePassword123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: Account locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Valid refresh token
              required:
                - refreshToken
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and invalidate refresh token
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token to invalidate
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Webhook Endpoints
  /api/webhooks/tradingview:
    post:
      tags:
        - Webhooks
      summary: TradingView webhook
      description: Receive and process TradingView webhook alerts
      parameters:
        - in: header
          name: X-TradingView-Signature
          required: true
          schema:
            type: string
          description: HMAC signature for webhook verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TradingViewWebhook'
            example:
              symbol: BTCUSDT
              action: buy
              price: 45000.50
              time: "2024-01-15T10:30:00Z"
              timeframe: "1h"
              exchange: "binance"
              strategy: "RSI_MACD"
              message: "RSI oversold, MACD bullish crossover"
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      webhookId:
                        type: string
                        example: "550e8400-e29b-41d4-a716-446655440000"
                      alertsTriggered:
                        type: integer
                        example: 3
                      processingTime:
                        type: integer
                        example: 150
                  message:
                    type: string
                    example: "Webhook processed successfully"
        '401':
          description: Invalid signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid webhook data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /api/webhooks/generic:
    post:
      tags:
        - Webhooks
      summary: Generic webhook
      description: Receive generic webhook with API key authentication
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericWebhook'
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '401':
          description: Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/webhooks/health:
    get:
      tags:
        - Webhooks
      summary: Webhook health check
      description: Get webhook system health and statistics
      responses:
        '200':
          description: Webhook health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookHealth'

  # Admin Endpoints
  /api/admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      description: Retrieve paginated list of all users (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of users per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for email, first name, or last name
        - in: query
          name: role
          schema:
            type: string
            enum: [admin, user]
          description: Filter by user role
        - in: query
          name: subscriptionPlan
          schema:
            type: string
            enum: [free, basic, premium]
          description: Filter by subscription plan
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filter by active status
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/admin/system/health:
    get:
      tags:
        - Admin
      summary: System health check
      description: Get comprehensive system health information (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: System health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealth'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/admin/system/stats:
    get:
      tags:
        - Admin
      summary: System statistics
      description: Get comprehensive system statistics (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: System statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStats'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Health Check
  /health:
    get:
      tags:
        - Health
      summary: API Gateway health check
      description: Check if the API Gateway is running and healthy
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  service:
                    type: string
                    example: "api-gateway"
                  version:
                    type: string
                    example: "1.0.0"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for webhook and programmatic access

  schemas:
    # User Schemas
    UserRegistration:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          minLength: 8
          description: User's password (min 8 characters)
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's first name
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's last name
        telegramId:
          type: string
          description: Optional Telegram user ID

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password

    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User's email address
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        telegramId:
          type: string
          nullable: true
          description: Linked Telegram user ID
        role:
          type: string
          enum: [admin, user]
          description: User's role
        subscriptionPlan:
          type: string
          enum: [free, basic, premium]
          description: User's subscription plan
        isActive:
          type: boolean
          description: Whether the user account is active
        isEmailVerified:
          type: boolean
          description: Whether the user's email is verified
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          description: Last login timestamp

    # Webhook Schemas
    TradingViewWebhook:
      type: object
      required:
        - symbol
        - action
        - price
        - time
      properties:
        symbol:
          type: string
          description: Trading symbol (e.g., BTCUSDT)
        action:
          type: string
          enum: [buy, sell, long, short, close]
          description: Trading action
        price:
          type: number
          format: float
          description: Current price
        time:
          type: string
          format: date-time
          description: Alert timestamp
        timeframe:
          type: string
          description: Chart timeframe
        exchange:
          type: string
          description: Exchange name
        strategy:
          type: string
          description: Strategy name
        message:
          type: string
          description: Alert message
        volume:
          type: number
          format: float
          description: Trading volume
        high:
          type: number
          format: float
          description: High price
        low:
          type: number
          format: float
          description: Low price
        open:
          type: number
          format: float
          description: Open price
        close:
          type: number
          format: float
          description: Close price
        rsi:
          type: number
          format: float
          description: RSI indicator value
        macd:
          type: number
          format: float
          description: MACD indicator value
        custom:
          type: object
          description: Custom fields

    GenericWebhook:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum: [alert, notification, custom]
          description: Webhook type
        source:
          type: string
          description: Webhook source
        data:
          type: object
          description: Webhook payload data
        metadata:
          type: object
          description: Additional metadata

    # Response Schemas
    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            tokens:
              $ref: '#/components/schemas/TokenData'
        message:
          type: string
          example: "Login successful"

    TokenResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            tokens:
              $ref: '#/components/schemas/TokenData'
        message:
          type: string
          example: "Token refreshed successfully"

    TokenData:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token
        expiresIn:
          type: string
          description: Access token expiration time

    WebhookResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            webhookId:
              type: string
              description: Unique webhook identifier
            processingTime:
              type: integer
              description: Processing time in milliseconds
            serviceResponse:
              type: object
              description: Response from processing service
        message:
          type: string
          example: "Webhook processed successfully"

    WebhookHealth:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            status:
              type: string
              example: "healthy"
            timestamp:
              type: string
              format: date-time
            services:
              type: object
              properties:
                alertEngine:
                  type: string
                  example: "healthy"
                telegramService:
                  type: string
                  example: "healthy"
                database:
                  type: string
                  example: "healthy"
            statistics:
              type: object
              properties:
                totalWebhooks:
                  type: integer
                successfulWebhooks:
                  type: integer
                failedWebhooks:
                  type: integer
                averageProcessingTime:
                  type: integer

    UsersListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            pagination:
              $ref: '#/components/schemas/Pagination'

    SystemHealth:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            status:
              type: string
              example: "healthy"
            timestamp:
              type: string
              format: date-time
            services:
              type: object
            database:
              type: object
            memory:
              type: object
            uptime:
              type: number

    SystemStats:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            users:
              type: object
            alerts:
              type: object
            charts:
              type: object
            system:
              type: object

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Items per page
        total:
          type: integer
          description: Total number of items
        pages:
          type: integer
          description: Total number of pages

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Success message

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        requestId:
          type: string
          description: Request identifier
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Validation error message
        code:
          type: string
          example: "VALIDATION_ERROR"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Field name with error
              message:
                type: string
                description: Field-specific error message
        requestId:
          type: string
          description: Request identifier
        timestamp:
          type: string
          format: date-time
          description: Error timestamp

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Webhooks
    description: Webhook processing endpoints
  - name: Admin
    description: Administrative endpoints (admin access required)
  - name: Health
    description: Health check endpoints