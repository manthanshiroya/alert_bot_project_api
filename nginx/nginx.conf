# =============================================================================
# Nginx Configuration for Alert Bot Project
# =============================================================================

# Main context
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# Worker connections and performance settings
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# HTTP context
http {
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # Access log
    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=20r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Upstream servers
    upstream api_gateway {
        least_conn;
        server api-gateway:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream subscription_service {
        least_conn;
        server subscription-service:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream alert_engine {
        least_conn;
        server alert-engine:3002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream telegram_service {
        least_conn;
        server telegram-service:3003 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Security headers map
    map $sent_http_content_type $security_headers {
        ~*text/html "nosniff";
        default "";
    }

    # SSL configuration (when SSL is enabled)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Include additional configuration files
    include /etc/nginx/conf.d/*.conf;

    # Default server (catch-all)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        return 444;
    }

    # Main server configuration
    server {
        listen 80;
        listen [::]:80;
        server_name localhost alertbot.local;

        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: ws:; frame-ancestors 'none';" always;

        # Connection and rate limiting
        limit_conn conn_limit_per_ip 20;
        limit_req zone=api burst=20 nodelay;

        # Client settings
        client_max_body_size 10M;
        client_body_timeout 60s;
        client_header_timeout 60s;

        # Proxy settings
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;

        # Common proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API Gateway routes
        location /api/ {
            proxy_pass http://api_gateway/;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Additional headers for API
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header X-Forwarded-Time $time_iso8601;
        }

        # Authentication routes (stricter rate limiting)
        location ~ ^/api/(auth|login|register|reset-password) {
            limit_req zone=auth burst=10 nodelay;
            proxy_pass http://api_gateway;
        }

        # Subscription service routes
        location /api/subscriptions/ {
            proxy_pass http://subscription_service/;
        }

        location /api/payments/ {
            proxy_pass http://subscription_service/payments/;
        }

        location /api/billing/ {
            proxy_pass http://subscription_service/billing/;
        }

        # Alert engine routes
        location /api/alerts/ {
            proxy_pass http://alert_engine/alerts/;
        }

        location /api/market-data/ {
            proxy_pass http://alert_engine/market-data/;
        }

        location /api/technical-analysis/ {
            proxy_pass http://alert_engine/technical-analysis/;
        }

        # Telegram service routes
        location /api/telegram/ {
            proxy_pass http://telegram_service/;
        }

        # Telegram webhook (higher rate limit)
        location /telegram/webhook {
            limit_req zone=webhook burst=50 nodelay;
            proxy_pass http://telegram_service/webhook;
            
            # Telegram-specific headers
            proxy_set_header X-Telegram-Bot-Api-Secret-Token $http_x_telegram_bot_api_secret_token;
        }

        # WebSocket connections for real-time updates
        location /ws/ {
            proxy_pass http://api_gateway/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Static files (if any)
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
        }

        # Favicon
        location = /favicon.ico {
            log_not_found off;
            access_log off;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Robots.txt
        location = /robots.txt {
            log_not_found off;
            access_log off;
            return 200 "User-agent: *\nDisallow: /\n";
            add_header Content-Type text/plain;
        }

        # Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Default location
        location / {
            return 404;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            return 404 "Not Found";
            add_header Content-Type text/plain;
        }
        
        location = /50x.html {
            internal;
            return 500 "Internal Server Error";
            add_header Content-Type text/plain;
        }
    }

    # HTTPS server configuration (uncomment when SSL certificates are available)
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name alertbot.local;
    # 
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    # 
    #     # HSTS header
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    # 
    #     # Include the same location blocks as HTTP server
    #     include /etc/nginx/conf.d/common-locations.conf;
    # }

    # Redirect HTTP to HTTPS (uncomment when SSL is enabled)
    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name alertbot.local;
    #     return 301 https://$server_name$request_uri;
    # }
}