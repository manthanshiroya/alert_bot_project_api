# =============================================================================
# Grafana Data Sources Configuration
# =============================================================================

apiVersion: 1

datasources:
  # Primary Prometheus Data Source
  - name: Prometheus
    type: prometheus
    access: proxy
    orgId: 1
    url: http://prometheus:9090
    isDefault: true
    version: 1
    editable: true
    jsonData:
      httpMethod: POST
      manageAlerts: true
      alertmanagerUid: alertmanager
      prometheusType: Prometheus
      prometheusVersion: 2.45.0
      cacheLevel: 'High'
      disableRecordingRules: false
      incrementalQueryOverlapWindow: 10m
      exemplarTraceIdDestinations:
        - name: trace_id
          datasourceUid: jaeger
      customQueryParameters: ''
      timeInterval: '30s'
      queryTimeout: '60s'
      defaultEditor: code
      disableMetricsLookup: false
      httpHeaderName1: 'X-Grafana-Org-Id'
    secureJsonData:
      httpHeaderValue1: '1'

  # Alertmanager Data Source (if available)
  - name: Alertmanager
    type: alertmanager
    access: proxy
    orgId: 1
    url: http://alertmanager:9093
    isDefault: false
    version: 1
    editable: true
    uid: alertmanager
    jsonData:
      implementation: prometheus
      handleGrafanaManagedAlerts: true
      httpMethod: GET

  # Loki for Log Aggregation (if available)
  - name: Loki
    type: loki
    access: proxy
    orgId: 1
    url: http://loki:3100
    isDefault: false
    version: 1
    editable: true
    uid: loki
    jsonData:
      maxLines: 1000
      derivedFields:
        - datasourceUid: jaeger
          matcherRegex: 'trace_id=(\w+)'
          name: TraceID
          url: '$${__value.raw}'

  # Jaeger for Distributed Tracing (if available)
  - name: Jaeger
    type: jaeger
    access: proxy
    orgId: 1
    url: http://jaeger:16686
    isDefault: false
    version: 1
    editable: true
    uid: jaeger
    jsonData:
      tracesToLogs:
        datasourceUid: loki
        tags: ['job', 'instance', 'pod', 'namespace']
        mappedTags: [{ key: 'service.name', value: 'service' }]
        mapTagNamesEnabled: false
        spanStartTimeShift: '1h'
        spanEndTimeShift: '1h'
        filterByTraceID: false
        filterBySpanID: false
      tracesToMetrics:
        datasourceUid: prometheus
        tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
        queries:
          - name: 'Sample query'
            query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
      nodeGraph:
        enabled: true
      search:
        hide: false
      spanBar:
        type: 'Tag'
        tag: 'http.path'

  # InfluxDB for Time Series Data (if available)
  - name: InfluxDB
    type: influxdb
    access: proxy
    orgId: 1
    url: http://influxdb:8086
    isDefault: false
    version: 1
    editable: true
    uid: influxdb
    database: alert_bot_metrics
    user: grafana
    jsonData:
      httpMode: GET
      keepCookies: []
    secureJsonData:
      password: 'grafana_password'

  # Elasticsearch for Log Analysis (if available)
  - name: Elasticsearch
    type: elasticsearch
    access: proxy
    orgId: 1
    url: http://elasticsearch:9200
    isDefault: false
    version: 1
    editable: true
    uid: elasticsearch
    database: 'alert-bot-logs-*'
    jsonData:
      interval: Daily
      timeField: '@timestamp'
      esVersion: '7.10.0'
      maxConcurrentShardRequests: 5
      logMessageField: 'message'
      logLevelField: 'level'
      includeFrozen: false

  # TestData for Development and Testing
  - name: TestData
    type: testdata
    access: proxy
    orgId: 1
    isDefault: false
    version: 1
    editable: true
    uid: testdata
    jsonData: {}

  # CloudWatch (if using AWS)
  - name: CloudWatch
    type: cloudwatch
    access: proxy
    orgId: 1
    isDefault: false
    version: 1
    editable: true
    uid: cloudwatch
    jsonData:
      authType: keys
      defaultRegion: us-east-1
      customMetricsNamespaces: 'AlertBot/Custom'
      assumeRoleArn: ''
    secureJsonData:
      accessKey: '${AWS_ACCESS_KEY_ID}'
      secretKey: '${AWS_SECRET_ACCESS_KEY}'

  # Azure Monitor (if using Azure)
  - name: Azure Monitor
    type: grafana-azure-monitor-datasource
    access: proxy
    orgId: 1
    isDefault: false
    version: 1
    editable: true
    uid: azure-monitor
    jsonData:
      azureAuthType: msi
      subscriptionId: '${AZURE_SUBSCRIPTION_ID}'
      tenantId: '${AZURE_TENANT_ID}'
      clientId: '${AZURE_CLIENT_ID}'
      cloudName: azuremonitor
    secureJsonData:
      clientSecret: '${AZURE_CLIENT_SECRET}'

  # Google Cloud Monitoring (if using GCP)
  - name: Google Cloud Monitoring
    type: stackdriver
    access: proxy
    orgId: 1
    isDefault: false
    version: 1
    editable: true
    uid: google-cloud-monitoring
    jsonData:
      authenticationType: jwt
      defaultProject: '${GCP_PROJECT_ID}'
      clientEmail: '${GCP_CLIENT_EMAIL}'
    secureJsonData:
      privateKey: '${GCP_PRIVATE_KEY}'

# Delete datasources that are not in this list
deleteDatasources:
  - name: 'Old Prometheus'
    orgId: 1
  - name: 'Test Data Source'
    orgId: 1